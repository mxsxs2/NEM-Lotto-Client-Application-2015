/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package options;

import frame.MysqlAccess;
import java.beans.PropertyChangeEvent;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author Mxsxs2
 */
public class Collect extends javax.swing.JPanel {
    private final MysqlAccess SQL = new MysqlAccess();
    private final String ApiCode="daaa9b8c-fa02-46c4-b5a7-5efe11538f15";
    private DefaultTableModel BTCModel;
    private DefaultTableModel NXTModel;
    private final utils.WalletEncrypt WE=new utils.WalletEncrypt();
    private final utils.URLtoJSON URLtoJSON=new utils.URLtoJSON();
    private final String[] CR;
    /**
     * Creates new form Collect
     * @param CR
     */
    public Collect(String[] CR) {
        initComponents();
        super.setBounds(0,0,870,577);
        this.CR=CR;
        this.jTabbedPane.addChangeListener((ChangeEvent e) -> {
            SWThread(jTabbedPane.getSelectedIndex());
        });
        this.SWThread(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRespLabel = new javax.swing.JLabel();
        jTabbedPane = new javax.swing.JTabbedPane();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jBtcCollectButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jGUIDTable = new javax.swing.JTable();
        jBtcAddressField = new javax.swing.JTextField();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jNxtCollectButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jNXTTable = new javax.swing.JTable();
        jNxtAddressField = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(870, 577));

        this.jRespLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jTabbedPane.setToolTipText("");

        jBtcCollectButton.setText("Collect");
        jBtcCollectButton.setPreferredSize(null);
        jBtcCollectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtcCollectButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Send to:");

        jGUIDTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Loading...", "Loading...", "Loading..."}
            },
            new String [] {
                "Wallet", "Session", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jGUIDTable.setMaximumSize(null);
        jGUIDTable.setMinimumSize(null);
        jGUIDTable.setPreferredSize(null);
        jScrollPane1.setViewportView(jGUIDTable);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtcAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtcCollectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 767, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtcCollectButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtcAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jLayeredPane1.setLayer(jBtcCollectButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jBtcAddressField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane.addTab("BTC", jLayeredPane1);

        jNxtCollectButton.setText("Collect");
        jNxtCollectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNxtCollectButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Send to:");

        jScrollPane2.setPreferredSize(new java.awt.Dimension(484, 484));

        jNXTTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Loading...", "Loading...", "Loading..."}
            },
            new String [] {
                "Wallet", "Session", "Balance"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jNXTTable.setMaximumSize(null);
        jNXTTable.setMinimumSize(null);
        jNXTTable.setPreferredSize(null);
        jScrollPane2.setViewportView(jNXTTable);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNxtAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jNxtCollectButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE))
                .addGap(0, 88, Short.MAX_VALUE))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jNxtCollectButton)
                    .addComponent(jNxtAddressField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jLayeredPane2.setLayer(jNxtCollectButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jScrollPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jNxtAddressField, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jTabbedPane.addTab("NXT", jLayeredPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRespLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 778, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 870, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jRespLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jBtcCollectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtcCollectButtonActionPerformed
        this.jRespLabel.setText("");
        if(this.jBtcAddressField.getText().trim().length()>30){
            int optionPane = javax.swing.JOptionPane.showConfirmDialog(         //Create the confirmation dialig
                    null,
                    "Are you sure you want to collect to "+this.jBtcAddressField.getText()+"?\n"
                    + "If the address is incorrect you will loose all of the coins!",
                    "Warning",
                    javax.swing.JOptionPane.YES_NO_OPTION);
                if(optionPane==javax.swing.JOptionPane.YES_OPTION){
                        this.collectBTC();
                }
        }else{
            this.jRespLabel.setText("Invalid recipient");
        } 
    }//GEN-LAST:event_jBtcCollectButtonActionPerformed

    private void jNxtCollectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNxtCollectButtonActionPerformed
        this.jRespLabel.setText("");
        if(this.jNxtAddressField.getText().trim().length()>20){
            int optionPane = javax.swing.JOptionPane.showConfirmDialog(         //Create the confirmation dialig
                    null,
                    "Are you sure you want to collect to "+this.jBtcAddressField.getText()+"?\n"
                    + "If the address is incorrect you will loose all of the coins!",
                    "Warning",
                    javax.swing.JOptionPane.YES_NO_OPTION);
                if(optionPane==javax.swing.JOptionPane.YES_OPTION){             
                        this.collectNXT();                                          
                }
        }else{
            this.jRespLabel.setText("Invalid recipient");
        } 
    }//GEN-LAST:event_jNxtCollectButtonActionPerformed
     private void SWThread(int TabID){
        this.setDefalultModels();
        javax.swing.SwingWorker<Void, Void> SW = new javax.swing.SwingWorker<Void, Void>(){
         @Override
         protected Void doInBackground() throws Exception {
            if(TabID==0) getBTCWallets();
            if(TabID==1) getNXTWallets();
            return null;
         }
      };
      SW.addPropertyChangeListener((PropertyChangeEvent evt) -> {
          if (evt.getPropertyName().equals("state")) {
              if (evt.getNewValue() == javax.swing.SwingWorker.StateValue.DONE) {
                  this.setTable(TabID);
              }
          }
        });
      SW.execute();
    }
     private void setTable(int TabID){
        if(TabID==0){
            this.jGUIDTable.setModel(this.BTCModel);
            this.jGUIDTable.setAutoCreateRowSorter(true);
            this.jGUIDTable.getTableHeader().setReorderingAllowed(false);
        }
        if(TabID==1){
            this.jNXTTable.setModel(this.NXTModel);
            this.jNXTTable.setAutoCreateRowSorter(true);
            this.jNXTTable.getTableHeader().setReorderingAllowed(false);
        }
     }
    private void getBTCWallets(){
        this.BTCModel = new DefaultTableModel(new Object[][]{},new String [] {"Wallet","Session", "Ballance(satoshi)","Collected"}){
                @Override
                public boolean isCellEditable(int row, int column){return false;}; //dont allow the table column editing
            };
        try {
            ResultSet RS = SQL.PreparedSelect("btcwallet", new String[]{"guid","rnd","time","session"}, "", "", "`session` DESC");
            if(RS.first()){
                RS.beforeFirst();
                while(RS.next()){
                    this.BTCModel.addRow(new Object[]{RS.getString("guid"),                                     //GUID
                        RS.getString("session"),                                                             //Session
this.getOneBTCBalance(RS.getString("guid"), RS.getString("rnd"), RS.getString("time")), //Balance
                        "N/A"                                                                                //Collected
                    });
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Collect.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    private void getNXTWallets(){
        this.NXTModel = new DefaultTableModel(new Object[][]{},new String [] {"id","Wallet","Option","Session", "Ballance(NQT)","Collected"}){
                @Override
                public boolean isCellEditable(int row, int column){return false;}; //dont allow the table column editing
            };
        try {
            ResultSet RS = SQL.PreparedSelect("optionaddresses", new String[]{"id","nxt1","nxt2","nxt3","nxt4","session"}, "", "", "`session` DESC");
            if(RS.first()){
                RS.beforeFirst();
                while(RS.next()){
                    for(int i=1;i<=4; i++){
                        if(!"16".equals(RS.getString("id"))) break;
                        Object[] row=new Object[6];
                        row[0]=RS.getString("id");                              //address
                        row[1]=RS.getString("nxt"+i);                           //address
                        row[2]=i;                                               //option
                        row[3]=RS.getString("session");                         //Session
                        row[4]=this.getOneNXTBalance(row[0]+"");                //Balance
                        row[5]="N/A" ;                                          //Collected
                        this.NXTModel.addRow(row);
                    }
                    //System.out.println("rows:"+this.NXTModel.getRowCount());
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(Collect.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private boolean doOneNXTTransaction(String AmountNQT,String Id,String Option){
        try {
            String pswd=null;
            ResultSet RS = SQL.PreparedSelect("optionaddresses", new String[]{"nxt"+Option}, "id="+Id, "1", "");
            try {
                if(RS.first()){
                    ResultSet DRS = SQL.PreparedSelect("addressdetails", new String[]{"rnd"+Option,"time"+Option}, "id='"+Id+"'", "1", "");
                    if(DRS!=null && DRS.first()){
                        pswd=this.WE.pswd(DRS.getString("rnd"+Option), DRS.getString("time"+Option));
                        System.out.println(pswd);
                    }
                }
                
            } catch (SQLException ex) {
               return false;
            }
            if(pswd==null) return false;
            java.net.URL url = new java.net.URL(this.CR[2]+"nxt");
            java.util.Map<String,Object> params = new java.util.LinkedHashMap<>();
            params.put("requestType", "sendMoney");
            params.put("secretPhrase", pswd);
            params.put("recipient", this.jNxtAddressField.getText().trim());
            params.put("amountNQT", Long.parseLong(AmountNQT)-10000000);
            params.put("feeNQT", "100000000");
            params.put("deadline", "60");
            StringBuilder postData = new StringBuilder();
            for (java.util.Map.Entry<String,Object> param : params.entrySet()) {
                if (postData.length() != 0) postData.append('&');
                postData.append(java.net.URLEncoder.encode(param.getKey(), "UTF-8"));
                postData.append('=');
                postData.append(java.net.URLEncoder.encode(String.valueOf(param.getValue()), "UTF-8"));
            }
            byte[] postDataBytes = postData.toString().getBytes("UTF-8");
            java.net.HttpURLConnection conn = (java.net.HttpURLConnection)url.openConnection();
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            conn.setRequestProperty("Content-Length", String.valueOf(postDataBytes.length));
            conn.setDoOutput(true);
            conn.getOutputStream().write(postDataBytes);
            
            java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(conn.getInputStream(), "UTF-8"));
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = br.readLine()) != null) {
                sb.append(line);
                System.out.println(line);
            }
            org.json.JSONObject json= new org.json.JSONObject(sb.toString());
            if(json.isNull("errorCode")){
                sb.toString();
                System.out.println("no errorcode");
                return true;
            }else{
                if(!json.isNull("errorDescription")){
                    this.jRespLabel.setText(json.getString("errorDescription"));
                }
                return false;
            }
        } catch (UnsupportedEncodingException | MalformedURLException ex) {
            //Logger.getLogger(Refund.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | JSONException ex) {
            //Logger.getLogger(Refund.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
}
    private String getOneBTCBalance(String GUID,String Creator, String Time){
        try{
            JSONObject json = this.URLtoJSON.open(this.CR[8]+"merchant/"+GUID+"/balance?password="+this.WE.pswd(Creator, Time)+"&api_code="+this.ApiCode);
            if(!json.isNull("error")) return json.getString("error");               //If there is no transactions return false;
            return Integer.toString(json.getInt("balance"));
        } catch (JSONException | NumberFormatException e) {
            e.printStackTrace();
        }
        return "Can't open";
    }
    private String getOneNXTBalance(String Address){
        try{
            JSONObject json = this.URLtoJSON.open(this.CR[2]+"nxt?requestType=getBalance&account="+Address);
            if(!json.isNull("errorDescription")) return json.getString("errorDescription");               //If there is no transactions return false;
            return Integer.toString(json.getInt("balanceNQT"));
        } catch (JSONException | NumberFormatException e) {
            e.printStackTrace();
        }
        return "Can't open";
    }
    private boolean doOneTransaction(String GUID){
        ResultSet RS = SQL.PreparedSelect("btcwallet", new String[]{"rnd","time"}, "`guid`='"+GUID+"'", "1", "");
        try {
            if(!RS.first()) return false; 
            String pswd=this.WE.pswd(RS.getString("rnd"), RS.getString("time"));
            String to=this.jBtcAddressField.getText().trim();
            long fee=20000;
            long amount=0;
            try{
                amount=Long.parseLong(this.getOneBTCBalance(GUID, RS.getString("rnd"), RS.getString("time")));
            }catch (NumberFormatException ex) {
                return false;
            }
            String sendamount=Long.toString(amount-fee);
            if((amount-fee)<0) return false;
            JSONObject json = this.URLtoJSON.open(this.CR[8]+"merchant/"+GUID+"/payment?password="+pswd+"&to="+to+"&amount="+sendamount+"&fee="+fee);
            if(!json.isNull("error")) return false; 
            if(json.getString("tx_hash")!=null ) return true;
        } catch (SQLException | JSONException ex) {
            Logger.getLogger(Collect.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    private void collectBTC(){
        TableModel Table = this.jGUIDTable.getModel();                                                                               //Get model
            for(int Row=0; Row<Table.getRowCount(); Row++){                                                                                 //Go through
                if(Table.getValueAt(Row, 2)!="0"){
                    Table.setValueAt(this.doOneTransaction(Table.getValueAt(Row, 0).toString()), Row, 3);       //Try to collect
                }
            }
    }
    private void collectNXT(){
        TableModel Table = this.jNXTTable.getModel();                                                                               //Get model
            for(int Row=0; Row<Table.getRowCount(); Row++){                                                                                 //Go through
                if(Table.getValueAt(Row, 4)!="0"){
                    Table.setValueAt(this.doOneNXTTransaction(Table.getValueAt(Row, 4).toString(), Table.getValueAt(Row, 0).toString(), Table.getValueAt(Row, 2).toString()),Row,3);       //Try to collect
                }
            }
    }
    private void setDefalultModels(){
        this.NXTModel = new DefaultTableModel(new Object[][]{},new String [] {"Id","Wallet","Option","Session", "Ballance(NQT)","Collected"}){
                @Override
                public boolean isCellEditable(int row, int column){return false;}; //dont allow the table column editing
            };
        this.NXTModel.addRow(new Object[]{"Loading...","Loading...","Loading...","Loading...","Loading...","Loading..."});
        this.BTCModel = new DefaultTableModel(new Object[][]{},new String [] {"Wallet","Session", "Ballance(satoshi)","Collected"}){
                @Override
                public boolean isCellEditable(int row, int column){return false;}; //dont allow the table column editing
        };
        this.BTCModel.addRow(new Object[]{"Loading...","Loading...","Loading...","Loading..."});
        this.setTable(0);
        this.setTable(1);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jBtcAddressField;
    private javax.swing.JButton jBtcCollectButton;
    private javax.swing.JTable jGUIDTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JTable jNXTTable;
    private javax.swing.JTextField jNxtAddressField;
    private javax.swing.JButton jNxtCollectButton;
    private javax.swing.JLabel jRespLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane;
    // End of variables declaration//GEN-END:variables
}
