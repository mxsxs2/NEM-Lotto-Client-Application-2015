/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package options;


import frame.MysqlAccess;
import java.beans.PropertyChangeEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mxsxs2
 */
public class EntryReport extends javax.swing.JPanel {
    private final MysqlAccess SQL = new MysqlAccess();
    private final classes.ConfigReader CR;
    private java.util.ArrayList<String[]> TransactionList;
    private int TotalEntriesNXT;
    private int TotalValidEntriesNXT;
    private float TotalAmountNXT;
    private float TotalValidAmountNXT;
    private int TotalEntriesBTC;
    private int TotalValidEntriesBTC;
    private float TotalAmountBTC;                                               
    private float TotalValidAmountBTC;
    private float[][] EachEntriesNXT=new float[][]{{0,0},{0,0},{0,0},{0,0}};
    private float[][] EachEntriesBTC=new float[][]{{0,0},{0,0},{0,0},{0,0}};
    private float NXTinBTC=1;
    private float BTCinXEM=1;
    private float NXTinXEM=1;
    private utils.CurrencyConverter Conv;        //get converter class
    /**
     * Creates new form NextEntries
     * @param CR
     */
    public EntryReport(classes.ConfigReader CR) {
        super.setBounds(0,0,780,577);
        initComponents();
        this.CR=CR;
        this.Conv=new utils.CurrencyConverter(this.CR.getValues()[1]);
        this.setSessionBox();
        this.SWThread();
        this.getCurrencies();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OptionbuttonGroup = new javax.swing.ButtonGroup();
        jBigCont = new javax.swing.JLayeredPane();
        jFilterLayer = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jRadioButton6 = new javax.swing.JRadioButton();
        jRadioButton5 = new javax.swing.JRadioButton();
        jSave = new javax.swing.JButton();
        jPayButton = new javax.swing.JButton();
        jSessionBox = new javax.swing.JComboBox();
        jCurrency = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jConvertBox = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEntries = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jNXTEntriesLabel = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jValidNXTEntriesLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jTotalValidAmountLabel = new javax.swing.JLabel();
        jTotalAmountLabel = new javax.swing.JLabel();
        jLoadLayer = new javax.swing.JLayeredPane();
        jLabel5 = new javax.swing.JLabel();

        setMaximumSize(new java.awt.Dimension(780, 577));
        setMinimumSize(new java.awt.Dimension(780, 577));
        setPreferredSize(new java.awt.Dimension(780, 557));

        jBigCont.setEnabled(false);
        jBigCont.setMaximumSize(new java.awt.Dimension(780, 588));
        jBigCont.setMinimumSize(new java.awt.Dimension(780, 588));

        jFilterLayer.setBorder(javax.swing.BorderFactory.createTitledBorder("Filters"));
        jFilterLayer.setVerifyInputWhenFocusTarget(false);

        jLabel2.setText("Option to show:");

        OptionbuttonGroup.add(jRadioButton1);
        jRadioButton1.setText("1");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        OptionbuttonGroup.add(jRadioButton2);
        jRadioButton2.setText("2");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        OptionbuttonGroup.add(jRadioButton3);
        jRadioButton3.setText("3");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        OptionbuttonGroup.add(jRadioButton4);
        jRadioButton4.setText("4");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        OptionbuttonGroup.add(jRadioButton6);
        jRadioButton6.setText("Refund");
        jRadioButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton6ActionPerformed(evt);
            }
        });

        OptionbuttonGroup.add(jRadioButton5);
        jRadioButton5.setSelected(true);
        jRadioButton5.setText("Show all");
        jRadioButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton5ActionPerformed(evt);
            }
        });

        jSave.setText("Save result to file");
        jSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveActionPerformed(evt);
            }
        });

        jPayButton.setText("Payout in Nem");
        jPayButton.setToolTipText("");
        jPayButton.setEnabled(false);
        jPayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPayButtonActionPerformed(evt);
            }
        });

        jSessionBox.setToolTipText("The choosen session's transactions will shown");

        jCurrency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Any", "NXT", "BTC" }));
        jCurrency.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCurrencyActionPerformed(evt);
            }
        });

        jLabel4.setText("Session:");

        jLabel3.setText("Source Currency:");

        jConvertBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NXT", "BTC", "XEM" }));
        jConvertBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jConvertBoxItemStateChanged(evt);
            }
        });

        jLabel6.setText("Convert to:");

        javax.swing.GroupLayout jFilterLayerLayout = new javax.swing.GroupLayout(jFilterLayer);
        jFilterLayer.setLayout(jFilterLayerLayout);
        jFilterLayerLayout.setHorizontalGroup(
            jFilterLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jFilterLayerLayout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jFilterLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jFilterLayerLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jConvertBox, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jLabel4))
                    .addGroup(jFilterLayerLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButton5)))
                .addGap(0, 0, 0)
                .addGroup(jFilterLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jFilterLayerLayout.createSequentialGroup()
                        .addComponent(jSave, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSessionBox, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );
        jFilterLayerLayout.setVerticalGroup(
            jFilterLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jFilterLayerLayout.createSequentialGroup()
                .addGroup(jFilterLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4)
                    .addComponent(jRadioButton5)
                    .addComponent(jLabel2)
                    .addComponent(jSave)
                    .addComponent(jRadioButton6)
                    .addComponent(jPayButton))
                .addGap(6, 6, 6)
                .addGroup(jFilterLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jSessionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jConvertBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jFilterLayer.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jRadioButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jRadioButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jRadioButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jRadioButton4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jRadioButton6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jRadioButton5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jSave, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jPayButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jSessionBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jCurrency, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jConvertBox, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jFilterLayer.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setToolTipText("");
        jScrollPane1.setMaximumSize(null);
        jScrollPane1.setMinimumSize(null);
        jScrollPane1.setOpaque(false);
        jScrollPane1.setRequestFocusEnabled(false);

        jEntries.setAutoCreateRowSorter(true);
        jEntries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Address", "Amount", "Option", "Timestamp"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jEntries.setMaximumSize(null);
        jEntries.setMinimumSize(null);
        jEntries.setName(""); // NOI18N
        jEntries.setOpaque(false);
        jEntries.setPreferredSize(new java.awt.Dimension(760, 300));
        jScrollPane1.setViewportView(jEntries);

        jLabel1.setText("Total NXT entries:");

        jNXTEntriesLabel.setText("0");

        jLabel7.setText("Total Valid NXT entries:");

        jValidNXTEntriesLabel.setText("0");

        jLabel9.setText("Total amount:");

        jLabel11.setText("Total valid amount:");

        jTotalValidAmountLabel.setText("0");

        jTotalAmountLabel.setText("0");

        javax.swing.GroupLayout jBigContLayout = new javax.swing.GroupLayout(jBigCont);
        jBigCont.setLayout(jBigContLayout);
        jBigContLayout.setHorizontalGroup(
            jBigContLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBigContLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jNXTEntriesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jValidNXTEntriesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTotalAmountLabel)
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTotalValidAmountLabel)
                .addGap(0, 328, Short.MAX_VALUE))
            .addGroup(jBigContLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jBigContLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jFilterLayer))
                .addGap(10, 10, 10))
        );
        jBigContLayout.setVerticalGroup(
            jBigContLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBigContLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFilterLayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jBigContLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jNXTEntriesLabel)
                    .addComponent(jLabel7)
                    .addComponent(jValidNXTEntriesLabel)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11)
                    .addComponent(jTotalValidAmountLabel)
                    .addComponent(jTotalAmountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );
        jBigCont.setLayer(jFilterLayer, javax.swing.JLayeredPane.PALETTE_LAYER);
        jBigCont.setLayer(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBigCont.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBigCont.setLayer(jNXTEntriesLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBigCont.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBigCont.setLayer(jValidNXTEntriesLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBigCont.setLayer(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBigCont.setLayer(jLabel11, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBigCont.setLayer(jTotalValidAmountLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jBigCont.setLayer(jTotalAmountLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLoadLayer.setMaximumSize(new java.awt.Dimension(780, 577));
        jLoadLayer.setMinimumSize(new java.awt.Dimension(780, 577));
        jLoadLayer.setLayout(new java.awt.GridBagLayout());

        jLabel5.setText("Loading. Please wait, it can take several minutes...");
        jLoadLayer.add(jLabel5, new java.awt.GridBagConstraints());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jBigCont, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLoadLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 780, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jBigCont, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 18, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLoadLayer, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        this.setTable(this.applyFilter("1"));
        this.jPayButton.setEnabled(true);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        this.setTable(this.applyFilter("2"));
        this.jPayButton.setEnabled(true);
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        this.setTable(this.applyFilter("3"));
        this.jPayButton.setEnabled(true);
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        this.setTable(this.applyFilter("4"));
        this.jPayButton.setEnabled(true);
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
        this.setTable(this.TransactionList);
        this.jPayButton.setEnabled(false);
    }//GEN-LAST:event_jRadioButton5ActionPerformed

    private void jSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveActionPerformed
        if(this.jEntries.getModel().getRowCount()>0)this.getTableData();
    }//GEN-LAST:event_jSaveActionPerformed

    private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton6ActionPerformed
        this.setTable(this.applyFilter("refund"));
        this.jPayButton.setEnabled(false);
    }//GEN-LAST:event_jRadioButton6ActionPerformed

    private void jCurrencyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCurrencyActionPerformed
        utils.GroupButtonUtils ButtonUtils=new utils.GroupButtonUtils();
        String Option=ButtonUtils.getSelectedButtonText(this.OptionbuttonGroup);
        System.out.println(Option);
        this.setTable(this.applyFilter(Option.toLowerCase()));
        
    }//GEN-LAST:event_jCurrencyActionPerformed

    private void jPayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPayButtonActionPerformed
        this.openPayoutFrame();
    }//GEN-LAST:event_jPayButtonActionPerformed

    private void jConvertBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jConvertBoxItemStateChanged
        String selected=this.jConvertBox.getSelectedItem().toString();
        String chosenText="";
        switch (selected) {
            case "NXT":
                
                break;
            case "BTC":
                chosenText="toBTC";
                break;
            case "XEM":
                chosenText="toXEM";
                break;
        }
        this.changeAmountCurrency();
    }//GEN-LAST:event_jConvertBoxItemStateChanged

    private void setSessionBox(){
        java.sql.ResultSet RS=this.SQL.PreparedSelect("session,optionaddresses", new String[]{"sid","end","start","paid"},"`session`.`sid`=`optionaddresses`.`session`","0","`sid` DESC");
        if(RS!=null){
            try {
                RS.last();
                RS.beforeFirst();
                while(RS.next()){
                    String paid="no";
                    if("1".equals(RS.getString("paid"))) paid="yes";
                    this.jSessionBox.addItem(RS.getString("sid")+" "+RS.getString("start")+" to "+RS.getString("end")+", Paid: "+paid);
                }
            } catch (SQLException ex) {
                Logger.getLogger(EntryReport.class.getName()).log(Level.SEVERE, null, ex);
            }finally{
                org.apache.commons.dbutils.DbUtils.closeQuietly(RS);
            }
        }
        jSessionBox.addItemListener((java.awt.event.ItemEvent evt) -> {
            this.SWThread();
        });
    }
    private void getCurrencies(){
        this.jBigCont.setVisible(false);
        this.jLoadLayer.setVisible(true);
        javax.swing.SwingWorker<Void, Void> SW = new javax.swing.SwingWorker<Void, Void>(){
         @Override
         protected Void doInBackground() throws Exception {
                                    NXTinBTC=Float.parseFloat(Conv.NXTtoBTC("0"));
                                    BTCinXEM=Float.parseFloat(Conv.XEMtoBTC("xem=1"));
                                    NXTinXEM=NXTinBTC/BTCinXEM;
                                    Conv.setChangeValues(NXTinBTC,BTCinXEM,NXTinXEM); //set array for the converter method
                                    System.out.println(NXTinBTC+"_"+BTCinXEM+"_"+NXTinXEM);
                                    
            return null;
         }
      };
      SW.addPropertyChangeListener((PropertyChangeEvent evt) -> {
          if (evt.getPropertyName().equals("state")) {
              if (evt.getNewValue() == javax.swing.SwingWorker.StateValue.DONE) {
                  jBigCont.setVisible(true);
                  jLoadLayer.setVisible(false);
              }
          }
        });
      SW.execute();
    }
    private void SWThread(){
        this.jBigCont.setVisible(false);
        this.jLoadLayer.setVisible(true);
        javax.swing.SwingWorker<Void, Void> SW = new javax.swing.SwingWorker<Void, Void>(){
         @Override
         protected Void doInBackground() throws Exception {
            setTransactions();
            return null;
         }
      };
      SW.addPropertyChangeListener((PropertyChangeEvent evt) -> {
          if (evt.getPropertyName().equals("state")) {
              if (evt.getNewValue() == javax.swing.SwingWorker.StateValue.DONE) {
                  setTable(TransactionList);
                  jBigCont.setVisible(true);
                  jLoadLayer.setVisible(false);
              }
          }
        });
      SW.execute();
    }
    private void setTransactions(){
        ResultSet RS=null;
        try {
            this.TransactionList=new java.util.ArrayList<>();
            String SelectedItem=(String)this.jSessionBox.getSelectedItem();
            String[] IDA=SelectedItem.split(" ");
            //---------------------------------------------nxt
            RS=SQL.PreparedSelect("optionaddresses", new String[]{"*"},"`session`='"+IDA[0]+"'","1","");
            if(RS.first()){
                RS.beforeFirst();
                classes.GetNXT NXT=new classes.GetNXT(this.CR.getValues()[2]+"nxt?");
                while(RS.next()){
                    NXT.openURL(RS.getString("nxt1"), "1");
                    NXT.openURL(RS.getString("nxt2"), "2");
                    NXT.openURL(RS.getString("nxt3"), "3");
                    NXT.openURL(RS.getString("nxt4"), "4");
                }
                this.TransactionList.addAll(NXT.getList());
                this.EachEntriesNXT=NXT.getEachEntries();
                
                this.TotalAmountNXT=(float)NXT.getEntriesAndAmounts()[0];
                this.TotalValidAmountNXT=(float)NXT.getEntriesAndAmounts()[1];
                this.TotalEntriesNXT=(int)NXT.getEntriesAndAmounts()[2];
                this.TotalValidEntriesNXT=(int)NXT.getEntriesAndAmounts()[3];
            }
            //----------------------------------------------btc
            classes.openBTCWallet Wallets = new classes.openBTCWallet(this.CR.getValues()[8],IDA[0]);
            Wallets.openOneWallet();
            this.TransactionList.addAll(Wallets.getList());
            this.EachEntriesBTC=Wallets.getEachEntries();
                
            this.TotalAmountBTC=(float)Wallets.getEntriesAndAmounts()[0];
            this.TotalValidAmountBTC=(float)Wallets.getEntriesAndAmounts()[1];
            this.TotalEntriesBTC=(int)Wallets.getEntriesAndAmounts()[2];
            this.TotalValidEntriesBTC=(int)Wallets.getEntriesAndAmounts()[3];
        } catch (SQLException ex) {
            Logger.getLogger(EntryReport.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            org.apache.commons.dbutils.DbUtils.closeQuietly(RS);
        }
        this.setLabels();
    }
    private void setTable(java.util.ArrayList<String[]> Rows){
        DefaultTableModel list = new DefaultTableModel(new Object[][]{},new String [] {"T.ID","Sender", "Amount","Wins", "Option","Origin","NEM","Timestamp",}){
                        @Override
                        public boolean isCellEditable(int row, int column){return false;}; //dont allow the table column editing
                        
                    };
        
            if(Rows!=null && Rows.size()>0){
                Rows.stream().forEach((Row) -> {
                    String wins="0 ("+Row[4].toUpperCase()+")";
                    float sentamount=Float.parseFloat(Row[2].split(" ")[0]);
                    if(!Row[6].equals("false") && sentamount>0 && !Row[1].equals("false")){
                        wins=this.calculateWinnerAmount(Integer.parseInt(Row[3]), sentamount,Row[4])+" ("+Row[4].toUpperCase()+")";
                    }
                    list.addRow(new Object[]{Row[0], //Transaction id
                        Row[1], //Sender
                        Row[2], //Amount
                        wins,
                        Row[3], //Option
                        Row[4], //Currency
                        Row[6], //NEM
                        Row[5], //DATE
                    });
            });
            }
        this.jEntries.setModel(list);
        this.jEntries.getColumnModel().getColumn(3).setPreferredWidth(35);
        this.jEntries.getColumnModel().getColumn(4).setPreferredWidth(22);
        this.jEntries.getColumnModel().getColumn(5).setPreferredWidth(22);
        this.jEntries.setAutoCreateRowSorter(true);
        this.jEntries.getTableHeader().setReorderingAllowed(false);
        this.changeAmountCurrency();
    }
    private java.util.ArrayList<String[]> applyFilter(String filter){
        //System.out.println(filter.toLowerCase());
        java.util.ArrayList<String[]> List = new java.util.ArrayList<>();
            int index=0;
            if(filter.length()==1) index=3; //If the filter applies for option
        if(this.TransactionList==null || this.TransactionList.size()<1) return List; //return empty list if there is nothing to filter 
        for (String[] Transaction : this.TransactionList) {
            if(this.jCurrency.getSelectedItem().toString().equals("Any") || Transaction[4].equals(this.jCurrency.getSelectedItem().toString().toLowerCase())){    //If it is the choosen currency or "Any";
                if(filter.equals("refund")){                                           //If refund
                    if(Transaction[6].equals("false") || Float.parseFloat(Transaction[2].split(" ")[0])<1) List.add(Transaction); //If sender not in db or value less than 1
                }else{                                                                 //If not refund
                    if(!Transaction[6].equals("false")){                               //If its a NEM address                  
                        if(Float.parseFloat(Transaction[2].split(" ")[0])>0){                        //If the value is bigger than 1    
                            if (Transaction[index].equals(filter.toLowerCase())){      //If meets with the filtered requirements.
                                List.add(Transaction);
                            }
                        }
                    }
                }
            }
            if(this.jCurrency.getSelectedItem().toString().equals("Any") || Transaction[4].equals(this.jCurrency.getSelectedItem().toString().toLowerCase())){
                if(filter.equals("show all")) List.add(Transaction);
            }
        }
            return List;
    }
    private String calculateWinnerAmount(int option, float entered, String currency){
        double BTC = this.Conv.convertWithValues("btc", currency, Float.toString(this.EachEntriesBTC[option][1])); //convert btc to "currency"
        double NXT = this.Conv.convertWithValues("nxt", currency, Float.toString(this.EachEntriesNXT[option][1])); //convert nxt to "currency"
        double TBTC = this.Conv.convertWithValues("btc", currency, Float.toString(this.TotalValidAmountBTC)); //convert btc to "currency"
        double TNXT = this.Conv.convertWithValues("nxt", currency, Float.toString(this.TotalValidAmountNXT)); //convert nxt to "currency"
        double OptionEntryValue=BTC+NXT;
        if(OptionEntryValue<=0) return "0";
        
        return Double.toString((((TBTC+TNXT)/OptionEntryValue)*entered));
    }
    private void setLabels(){
        
        this.jNXTEntriesLabel.setText(Integer.toString(this.TotalEntriesNXT));
        this.jValidNXTEntriesLabel.setText(Integer.toString(this.TotalValidEntriesNXT));
        this.jTotalAmountLabel.setText(Float.toString(this.TotalAmountNXT/100000000)+" (NXT)");
        String va=Double.toString(this.TotalValidAmountNXT/100000000);
        this.jTotalValidAmountLabel.setText(va+" (NXT)");
        
    }
    // save to csv--------------------------------------------------------------------------------------------
    private void getTableData(){
        int rows=this.jEntries.getModel().getRowCount();
        int collumns=this.jEntries.getModel().getColumnCount();
        String[][] Data=new String[rows+1][collumns];
        for(int i=0; i<collumns; i++) Data[0][i]=this.jEntries.getModel().getColumnName(i);
        for(int r=0; r<rows; r++){      //Go trough rows
            for(int c=0; c<collumns; c++){
                Data[r+1][c]=this.jEntries.getModel().getValueAt(r, c).toString();
            }
        }
        utils.ArrayToCSV atc=new utils.ArrayToCSV(Data, new java.util.Date().toString());
    }
    // change currency-----------------------------------------------------------------------------------------
    private void changeAmountCurrency(){
       String Currency=this.jConvertBox.getSelectedItem().toString();
        String Header=this.jEntries.getTableHeader().getColumnModel().getColumn(2).getHeaderValue().toString();                         
        //convert totals
          /*String[] AmountLabel=this.jTotalAmountLabel.getText().split(" ");
          this.jTotalAmountLabel.setText(this.FormattedNumber(Conv.convertWithValues(AmountLabel[1].replace("(", "").replace(")", ""), Currency, AmountLabel[0]),5).toPlainString()+" ("+Currency+")");
          String[] ValidAmountLabel=this.jTotalValidAmountLabel.getText().split(" ");
          this.jTotalValidAmountLabel.setText(this.FormattedNumber(Conv.convertWithValues(ValidAmountLabel[1].replace("(", "").replace(")", ""), Currency, ValidAmountLabel[0]),5).toPlainString()+" ("+Currency+")");
        *///convert table content
        
        if(!Header.equals("Amount ("+Currency+")")){
            int rows=this.jEntries.getModel().getRowCount();
            
            for(int r=0; r<rows; r++){
                        String[] EnteredValue=this.jEntries.getModel().getValueAt(r,2).toString().split(" "); //0=value 1=currency
                        String[] WinValue=this.jEntries.getModel().getValueAt(r,3).toString().split(" "); //0=value 1=currency
                        String EnteredFrom=EnteredValue[1].replace("(", "").replace(")", "");
                        String WinFrom=WinValue[1].replace("(", "").replace(")", "");
                        this.jEntries.getModel().setValueAt(this.FormattedNumber(this.Conv.convertWithValues(EnteredFrom, Currency, EnteredValue[0]),20).toPlainString()+" ("+Currency+")", r, 2);
                        this.jEntries.getModel().setValueAt(this.FormattedNumber(this.Conv.convertWithValues(WinFrom, Currency, WinValue[0]),20).toPlainString()+" ("+Currency+")", r, 3);
                       
            }
            this.jEntries.getTableHeader().getColumnModel().getColumn(2).setHeaderValue("Amount ("+Currency+")");
            this.jEntries.getTableHeader().getColumnModel().getColumn(3).setHeaderValue("Wins ("+Currency+")");
            this.jEntries.getTableHeader().repaint();
        }
            
    }
    private java.math.BigDecimal FormattedNumber(double Number, int Length){
        java.math.BigDecimal res=new java.math.BigDecimal(Number)
                                 .setScale(Length,java.math.RoundingMode.HALF_EVEN)
                                 .stripTrailingZeros();
        return res;
    }
    // payout -------------------------------------------------------------------------------------------------
    private java.util.ArrayList<Object[]> getTableDataForPayout(){
        java.util.ArrayList<Object[]> list = new java.util.ArrayList<>();
        int rows=this.jEntries.getModel().getRowCount();
        for(int r=0; r<rows; r++){      //Go trough rows
            list.add(new Object[]{this.jEntries.getModel().getValueAt(r, 6).toString(),
                                  this.jEntries.getModel().getValueAt(r, 3).toString()
                                 });
                
        }
        return list;
    }
    private void openPayoutFrame(){
        java.util.ArrayList<Object[]> list = this.getTableDataForPayout();
        if(list.size()>0){
            EntryReport main = this;
            frame.Payout Payout=new frame.Payout(this.CR,this.NXTinBTC,this.BTCinXEM,this.NXTinXEM);
                         Payout.setTable(this.getTableDataForPayout());
                         Payout.setDetails(new String[]{this.jEntries.getModel().getValueAt(0, 4).toString(),
                                                        Float.toString(this.TotalValidAmountNXT/100000000)+" (NXT)",
                                                        this.jSessionBox.getSelectedItem().toString()});
                         java.awt.event.WindowListener listener=new java.awt.event.WindowAdapter(){
                                    @Override
                                    public void windowClosing(java.awt.event.WindowEvent evt) {
                                        SWThread();
                                        jRadioButton5.setSelected(true);
                                        main.requestFocus();
                                    }
                                    };
                         Payout.addWindowListener(listener);
                         Payout.setVisible(true);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup OptionbuttonGroup;
    private javax.swing.JLayeredPane jBigCont;
    private javax.swing.JComboBox jConvertBox;
    private javax.swing.JComboBox jCurrency;
    private javax.swing.JTable jEntries;
    private javax.swing.JLayeredPane jFilterLayer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLoadLayer;
    private javax.swing.JLabel jNXTEntriesLabel;
    private javax.swing.JButton jPayButton;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JRadioButton jRadioButton5;
    private javax.swing.JRadioButton jRadioButton6;
    private javax.swing.JButton jSave;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jSessionBox;
    private javax.swing.JLabel jTotalAmountLabel;
    private javax.swing.JLabel jTotalValidAmountLabel;
    private javax.swing.JLabel jValidNXTEntriesLabel;
    // End of variables declaration//GEN-END:variables
}
